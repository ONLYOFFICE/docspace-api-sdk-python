# coding: utf-8

"""
    Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from docspace.models.sso_settings_v2 import SsoSettingsV2

class TestSsoSettingsV2(unittest.TestCase):
    """SsoSettingsV2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SsoSettingsV2:
        """Test SsoSettingsV2
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SsoSettingsV2`
        """
        model = SsoSettingsV2()
        if include_optional:
            return SsoSettingsV2(
                last_modified = '2008-04-10T06:30+04:00',
                enable_sso = True,
                idp_settings = docspace.models.sso_idp_settings.SsoIdpSettings(
                    entity_id = 'some text', 
                    sso_url = 'some text', 
                    sso_binding = 'some text', 
                    slo_url = 'some text', 
                    slo_binding = 'some text', 
                    name_id_format = 'some text', ),
                idp_certificates = [
                    docspace.models.sso_certificate.SsoCertificate(
                        self_signed = True, 
                        crt = 'some text', 
                        key = 'some text', 
                        action = 'some text', 
                        domain_name = 'some text', 
                        start_date = '2008-04-10T06:30+04:00', 
                        expired_date = '2008-04-10T06:30+04:00', )
                    ],
                idp_certificate_advanced = docspace.models.sso_idp_certificate_advanced.SsoIdpCertificateAdvanced(
                    verify_algorithm = 'some text', 
                    verify_auth_responses_sign = True, 
                    verify_logout_requests_sign = True, 
                    verify_logout_responses_sign = True, 
                    decrypt_algorithm = 'some text', 
                    decrypt_assertions = True, ),
                sp_login_label = 'some text',
                sp_certificates = [
                    docspace.models.sso_certificate.SsoCertificate(
                        self_signed = True, 
                        crt = 'some text', 
                        key = 'some text', 
                        action = 'some text', 
                        domain_name = 'some text', 
                        start_date = '2008-04-10T06:30+04:00', 
                        expired_date = '2008-04-10T06:30+04:00', )
                    ],
                sp_certificate_advanced = docspace.models.sso_sp_certificate_advanced.SsoSpCertificateAdvanced(
                    signing_algorithm = 'some text', 
                    sign_auth_requests = True, 
                    sign_logout_requests = True, 
                    sign_logout_responses = True, 
                    encrypt_algorithm = 'some text', 
                    decrypt_algorithm = 'some text', 
                    encrypt_assertions = True, ),
                field_mapping = docspace.models.sso_field_mapping.SsoFieldMapping(
                    first_name = 'Winfield', 
                    last_name = 'Wyman', 
                    email = 'Sydney_Roberts4@hotmail.com', 
                    title = 'legacy_1080p_small_wooden_mouse', 
                    location = '001 Schroeder Run, New Tabithaport, Colombia', 
                    phone = 'some text', ),
                hide_auth_page = True,
                users_type = 1234,
                disable_email_verification = True
            )
        else:
            return SsoSettingsV2(
        )
        """

    def testSsoSettingsV2(self):
        """Test SsoSettingsV2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from docspace.models.schedule_wrapper import ScheduleWrapper

class TestScheduleWrapper(unittest.TestCase):
    """ScheduleWrapper unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScheduleWrapper:
        """Test ScheduleWrapper
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ScheduleWrapper`
        """
        model = ScheduleWrapper()
        if include_optional:
            return ScheduleWrapper(
                response = docspace.models.schedule.Schedule(
                    storage_type = 0, 
                    storage_params = [{"key":"some text","value":"some text"}], 
                    cron_params = docspace.models.cron_params.CronParams(
                        period = 0, 
                        hour = 1234, 
                        day = 1234, ), 
                    backups_stored = 1234, 
                    last_backup_time = '2008-04-10T06:30+04:00', 
                    dump = False, ),
                count = 56,
                links = [
                    docspace.models.active_connections_wrapper_links_inner.ActiveConnectionsWrapper_links_inner(
                        href = '', 
                        action = '', )
                    ],
                status = 56,
                status_code = 56
            )
        else:
            return ScheduleWrapper(
        )
        """

    def testScheduleWrapper(self):
        """Test ScheduleWrapper"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

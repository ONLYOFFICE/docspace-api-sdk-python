# coding: utf-8

"""
    Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from docspace.models.employee_full_array_wrapper import EmployeeFullArrayWrapper

class TestEmployeeFullArrayWrapper(unittest.TestCase):
    """EmployeeFullArrayWrapper unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EmployeeFullArrayWrapper:
        """Test EmployeeFullArrayWrapper
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EmployeeFullArrayWrapper`
        """
        model = EmployeeFullArrayWrapper()
        if include_optional:
            return EmployeeFullArrayWrapper(
                response = [
                    docspace.models.employee_full_dto.EmployeeFullDto(
                        id = '', 
                        display_name = 'Mike Zanyatski', 
                        title = 'Manager', 
                        avatar = 'some text', 
                        avatar_original = 'some text', 
                        avatar_max = 'some text', 
                        avatar_medium = 'some text', 
                        avatar_small = 'url to small avatar', 
                        profile_url = 'some text', 
                        has_avatar = True, 
                        is_anonim = True, 
                        first_name = 'Mike', 
                        last_name = 'Zanyatski', 
                        user_name = 'Mike.Zanyatski', 
                        email = 'my@gmail.com', 
                        contacts = [
                            docspace.models.contact.Contact(
                                type = 'GTalk', 
                                value = 'my@gmail.com', )
                            ], 
                        birthday = docspace.models.api_date_time.ApiDateTime(
                            utc_time = '2008-04-10T06:30+04:00', 
                            time_zone_offset = '00:00:00', ), 
                        sex = 'male', 
                        status = 1, 
                        activation_status = 0, 
                        terminated = docspace.models.api_date_time.ApiDateTime(
                            utc_time = '2008-04-10T06:30+04:00', 
                            time_zone_offset = '00:00:00', ), 
                        department = 'Marketing', 
                        work_from = , 
                        groups = [
                            docspace.models.group_summary_dto.GroupSummaryDto(
                                id = '', 
                                name = 'Group Name', 
                                manager = 'Jake.Zazhitski', )
                            ], 
                        location = 'Palo Alto', 
                        notes = 'Notes to worker', 
                        is_admin = False, 
                        is_room_admin = True, 
                        is_ldap = False, 
                        list_admin_modules = ["projects", "crm"], 
                        is_owner = True, 
                        is_visitor = True, 
                        is_collaborator = True, 
                        culture_name = 'en-EN', 
                        mobile_phone = 'some text', 
                        mobile_phone_activation_status = 0, 
                        is_sso = False, 
                        theme = 0, 
                        quota_limit = 1234, 
                        used_space = 12345, 
                        shared = True, 
                        is_custom_quota = True, 
                        login_event_id = 1234, 
                        created_by = docspace.models.employee_dto.EmployeeDto(
                            id = '', 
                            display_name = 'Mike Zanyatski', 
                            title = 'Manager', 
                            avatar = 'some text', 
                            avatar_original = 'some text', 
                            avatar_max = 'some text', 
                            avatar_medium = 'some text', 
                            avatar_small = 'url to small avatar', 
                            profile_url = 'some text', 
                            has_avatar = True, 
                            is_anonim = True, ), 
                        registration_date = , 
                        has_personal_folder = True, 
                        tfa_app_enabled = True, )
                    ],
                count = 56,
                links = [
                    docspace.models.active_connections_wrapper_links_inner.ActiveConnectionsWrapper_links_inner(
                        href = '', 
                        action = '', )
                    ],
                status = 56,
                status_code = 56
            )
        else:
            return EmployeeFullArrayWrapper(
        )
        """

    def testEmployeeFullArrayWrapper(self):
        """Test EmployeeFullArrayWrapper"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

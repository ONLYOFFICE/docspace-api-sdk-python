# coding: utf-8

"""
    Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from docspace.models.culture_specific_external_resources import CultureSpecificExternalResources

class TestCultureSpecificExternalResources(unittest.TestCase):
    """CultureSpecificExternalResources unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CultureSpecificExternalResources:
        """Test CultureSpecificExternalResources
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CultureSpecificExternalResources`
        """
        model = CultureSpecificExternalResources()
        if include_optional:
            return CultureSpecificExternalResources(
                api = docspace.models.culture_specific_external_resource.CultureSpecificExternalResource(
                    domain = 'some text', 
                    entries = [{"key":"some text","value":"some text"}], ),
                common = docspace.models.culture_specific_external_resource.CultureSpecificExternalResource(
                    domain = 'some text', 
                    entries = [{"key":"some text","value":"some text"}], ),
                forum = docspace.models.culture_specific_external_resource.CultureSpecificExternalResource(
                    domain = 'some text', 
                    entries = [{"key":"some text","value":"some text"}], ),
                helpcenter = docspace.models.culture_specific_external_resource.CultureSpecificExternalResource(
                    domain = 'some text', 
                    entries = [{"key":"some text","value":"some text"}], ),
                integrations = docspace.models.culture_specific_external_resource.CultureSpecificExternalResource(
                    domain = 'some text', 
                    entries = [{"key":"some text","value":"some text"}], ),
                site = docspace.models.culture_specific_external_resource.CultureSpecificExternalResource(
                    domain = 'some text', 
                    entries = [{"key":"some text","value":"some text"}], ),
                social_networks = docspace.models.culture_specific_external_resource.CultureSpecificExternalResource(
                    domain = 'some text', 
                    entries = [{"key":"some text","value":"some text"}], ),
                support = docspace.models.culture_specific_external_resource.CultureSpecificExternalResource(
                    domain = 'some text', 
                    entries = [{"key":"some text","value":"some text"}], ),
                videoguides = docspace.models.culture_specific_external_resource.CultureSpecificExternalResource(
                    domain = 'some text', 
                    entries = [{"key":"some text","value":"some text"}], )
            )
        else:
            return CultureSpecificExternalResources(
        )
        """

    def testCultureSpecificExternalResources(self):
        """Test CultureSpecificExternalResources"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

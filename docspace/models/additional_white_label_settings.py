# coding: utf-8

"""
    ASC.Web.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdditionalWhiteLabelSettings(BaseModel):
    """
    AdditionalWhiteLabelSettings
    """ # noqa: E501
    start_docs_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if the start document is enabled or not", alias="startDocsEnabled")
    help_center_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if the help center is enabled or not", alias="helpCenterEnabled")
    feedback_and_support_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if feedback and support are available or not", alias="feedbackAndSupportEnabled")
    user_forum_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if the user forum is enabled or not", alias="userForumEnabled")
    video_guides_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if the video guides are enabled or not", alias="videoGuidesEnabled")
    license_agreements_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if the license agreements are enabled or not", alias="licenseAgreementsEnabled")
    __properties: ClassVar[List[str]] = ["startDocsEnabled", "helpCenterEnabled", "feedbackAndSupportEnabled", "userForumEnabled", "videoGuidesEnabled", "licenseAgreementsEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdditionalWhiteLabelSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdditionalWhiteLabelSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDocsEnabled": obj.get("startDocsEnabled"),
            "helpCenterEnabled": obj.get("helpCenterEnabled"),
            "feedbackAndSupportEnabled": obj.get("feedbackAndSupportEnabled"),
            "userForumEnabled": obj.get("userForumEnabled"),
            "videoGuidesEnabled": obj.get("videoGuidesEnabled"),
            "licenseAgreementsEnabled": obj.get("licenseAgreementsEnabled")
        })
        return _obj



# coding: utf-8

"""
    ASC.Web.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DocServiceUrlDto(BaseModel):
    """
    DocServiceUrlDto
    """ # noqa: E501
    version: Optional[StrictStr] = Field(description="Version")
    doc_service_url_api: Optional[StrictStr] = Field(description="Doc service url api", alias="docServiceUrlApi")
    doc_service_url: Optional[StrictStr] = Field(description="Doc service url", alias="docServiceUrl")
    doc_service_url_internal: Optional[StrictStr] = Field(description="Doc service url internal", alias="docServiceUrlInternal")
    doc_service_portal_url: Optional[StrictStr] = Field(description="Doc service portal url", alias="docServicePortalUrl")
    doc_service_signature_header: Optional[StrictStr] = Field(default=None, description="Doc service signature header", alias="docServiceSignatureHeader")
    doc_service_ssl_verification: Optional[StrictBool] = Field(default=None, description="Enable SSL verification", alias="docServiceSslVerification")
    is_default: StrictBool = Field(description="Is default", alias="isDefault")
    __properties: ClassVar[List[str]] = ["version", "docServiceUrlApi", "docServiceUrl", "docServiceUrlInternal", "docServicePortalUrl", "docServiceSignatureHeader", "docServiceSslVerification", "isDefault"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocServiceUrlDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if doc_service_url_api (nullable) is None
        # and model_fields_set contains the field
        if self.doc_service_url_api is None and "doc_service_url_api" in self.model_fields_set:
            _dict['docServiceUrlApi'] = None

        # set to None if doc_service_url (nullable) is None
        # and model_fields_set contains the field
        if self.doc_service_url is None and "doc_service_url" in self.model_fields_set:
            _dict['docServiceUrl'] = None

        # set to None if doc_service_url_internal (nullable) is None
        # and model_fields_set contains the field
        if self.doc_service_url_internal is None and "doc_service_url_internal" in self.model_fields_set:
            _dict['docServiceUrlInternal'] = None

        # set to None if doc_service_portal_url (nullable) is None
        # and model_fields_set contains the field
        if self.doc_service_portal_url is None and "doc_service_portal_url" in self.model_fields_set:
            _dict['docServicePortalUrl'] = None

        # set to None if doc_service_signature_header (nullable) is None
        # and model_fields_set contains the field
        if self.doc_service_signature_header is None and "doc_service_signature_header" in self.model_fields_set:
            _dict['docServiceSignatureHeader'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocServiceUrlDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "docServiceUrlApi": obj.get("docServiceUrlApi"),
            "docServiceUrl": obj.get("docServiceUrl"),
            "docServiceUrlInternal": obj.get("docServiceUrlInternal"),
            "docServicePortalUrl": obj.get("docServicePortalUrl"),
            "docServiceSignatureHeader": obj.get("docServiceSignatureHeader"),
            "docServiceSslVerification": obj.get("docServiceSslVerification"),
            "isDefault": obj.get("isDefault")
        })
        return _obj



# coding: utf-8

"""
    ASC.Web.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SchemaRequestsDto(BaseModel):
    """
    Team template parameters
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Team template ID")
    name: Optional[StrictStr] = Field(default=None, description="Team template name")
    user_caption: Optional[StrictStr] = Field(default=None, description="User caption", alias="userCaption")
    users_caption: Optional[StrictStr] = Field(default=None, description="Users caption", alias="usersCaption")
    group_caption: Optional[StrictStr] = Field(default=None, description="Group caption", alias="groupCaption")
    groups_caption: Optional[StrictStr] = Field(default=None, description="Groups caption", alias="groupsCaption")
    user_post_caption: Optional[StrictStr] = Field(default=None, description="User status caption", alias="userPostCaption")
    reg_date_caption: Optional[StrictStr] = Field(default=None, description="Registration date caption", alias="regDateCaption")
    group_head_caption: Optional[StrictStr] = Field(default=None, description="Group lead caption", alias="groupHeadCaption")
    guest_caption: Optional[StrictStr] = Field(default=None, description="Guest caption", alias="guestCaption")
    guests_caption: Optional[StrictStr] = Field(default=None, description="Guests caption", alias="guestsCaption")
    __properties: ClassVar[List[str]] = ["id", "name", "userCaption", "usersCaption", "groupCaption", "groupsCaption", "userPostCaption", "regDateCaption", "groupHeadCaption", "guestCaption", "guestsCaption"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchemaRequestsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if user_caption (nullable) is None
        # and model_fields_set contains the field
        if self.user_caption is None and "user_caption" in self.model_fields_set:
            _dict['userCaption'] = None

        # set to None if users_caption (nullable) is None
        # and model_fields_set contains the field
        if self.users_caption is None and "users_caption" in self.model_fields_set:
            _dict['usersCaption'] = None

        # set to None if group_caption (nullable) is None
        # and model_fields_set contains the field
        if self.group_caption is None and "group_caption" in self.model_fields_set:
            _dict['groupCaption'] = None

        # set to None if groups_caption (nullable) is None
        # and model_fields_set contains the field
        if self.groups_caption is None and "groups_caption" in self.model_fields_set:
            _dict['groupsCaption'] = None

        # set to None if user_post_caption (nullable) is None
        # and model_fields_set contains the field
        if self.user_post_caption is None and "user_post_caption" in self.model_fields_set:
            _dict['userPostCaption'] = None

        # set to None if reg_date_caption (nullable) is None
        # and model_fields_set contains the field
        if self.reg_date_caption is None and "reg_date_caption" in self.model_fields_set:
            _dict['regDateCaption'] = None

        # set to None if group_head_caption (nullable) is None
        # and model_fields_set contains the field
        if self.group_head_caption is None and "group_head_caption" in self.model_fields_set:
            _dict['groupHeadCaption'] = None

        # set to None if guest_caption (nullable) is None
        # and model_fields_set contains the field
        if self.guest_caption is None and "guest_caption" in self.model_fields_set:
            _dict['guestCaption'] = None

        # set to None if guests_caption (nullable) is None
        # and model_fields_set contains the field
        if self.guests_caption is None and "guests_caption" in self.model_fields_set:
            _dict['guestsCaption'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchemaRequestsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "userCaption": obj.get("userCaption"),
            "usersCaption": obj.get("usersCaption"),
            "groupCaption": obj.get("groupCaption"),
            "groupsCaption": obj.get("groupsCaption"),
            "userPostCaption": obj.get("userPostCaption"),
            "regDateCaption": obj.get("regDateCaption"),
            "groupHeadCaption": obj.get("groupHeadCaption"),
            "guestCaption": obj.get("guestCaption"),
            "guestsCaption": obj.get("guestsCaption")
        })
        return _obj



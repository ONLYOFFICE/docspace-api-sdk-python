# coding: utf-8

"""
    Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ClientInfoResponse(BaseModel):
    """
    ClientInfoResponse
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    scopes: Optional[List[StrictStr]] = None
    client_id: Optional[StrictStr] = None
    website_url: Optional[StrictStr] = None
    terms_url: Optional[StrictStr] = None
    policy_url: Optional[StrictStr] = None
    logo: Optional[StrictStr] = None
    authentication_methods: Optional[List[StrictStr]] = None
    is_public: Optional[StrictBool] = None
    created_on: Optional[datetime] = None
    created_by: Optional[StrictStr] = None
    modified_on: Optional[datetime] = None
    modified_by: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "description", "scopes", "client_id", "website_url", "terms_url", "policy_url", "logo", "authentication_methods", "is_public", "created_on", "created_by", "modified_on", "modified_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "scopes": obj.get("scopes"),
            "client_id": obj.get("client_id"),
            "website_url": obj.get("website_url"),
            "terms_url": obj.get("terms_url"),
            "policy_url": obj.get("policy_url"),
            "logo": obj.get("logo"),
            "authentication_methods": obj.get("authentication_methods"),
            "is_public": obj.get("is_public"),
            "created_on": obj.get("created_on"),
            "created_by": obj.get("created_by"),
            "modified_on": obj.get("modified_on"),
            "modified_by": obj.get("modified_by")
        })
        return _obj



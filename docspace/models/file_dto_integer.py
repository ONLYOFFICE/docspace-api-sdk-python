# coding: utf-8

"""
    Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from docspace.models.api_date_time import ApiDateTime
from docspace.models.draft_location_integer import DraftLocationInteger
from docspace.models.employee_dto import EmployeeDto
from docspace.models.file_dto_integer_security import FileDtoIntegerSecurity
from docspace.models.file_dto_integer_view_accessibility import FileDtoIntegerViewAccessibility
from docspace.models.file_entry_type import FileEntryType
from docspace.models.file_share import FileShare
from docspace.models.file_status import FileStatus
from docspace.models.file_type import FileType
from docspace.models.folder_type import FolderType
from docspace.models.form_filling_status import FormFillingStatus
from docspace.models.thumbnail import Thumbnail
from typing import Optional, Set
from typing_extensions import Self

class FileDtoInteger(BaseModel):
    """
    The file parameters.
    """ # noqa: E501
    title: Optional[StrictStr] = Field(default=None, description="The file entry title.")
    access: Optional[FileShare] = None
    shared: Optional[StrictBool] = Field(default=None, description="Specifies if the file entry is shared or not.")
    created: Optional[ApiDateTime] = None
    created_by: Optional[EmployeeDto] = Field(default=None, alias="createdBy")
    updated: Optional[ApiDateTime] = None
    auto_delete: Optional[ApiDateTime] = Field(default=None, alias="autoDelete")
    root_folder_type: Optional[FolderType] = Field(default=None, alias="rootFolderType")
    parent_room_type: Optional[FolderType] = Field(default=None, alias="parentRoomType")
    updated_by: Optional[EmployeeDto] = Field(default=None, alias="updatedBy")
    provider_item: Optional[StrictBool] = Field(default=None, description="Specifies if the file entry provider is specified or not.", alias="providerItem")
    provider_key: Optional[StrictStr] = Field(default=None, description="The provider key of the file entry.", alias="providerKey")
    provider_id: Optional[StrictInt] = Field(default=None, description="The provider ID of the file entry.", alias="providerId")
    order: Optional[StrictStr] = Field(default=None, description="The order of the file entry.")
    id: Optional[StrictInt] = Field(default=None, description="The file entry ID.")
    root_folder_id: Optional[StrictInt] = Field(default=None, description="The root folder ID of the file entry.", alias="rootFolderId")
    origin_id: Optional[StrictInt] = Field(default=None, description="The origin ID of the file entry.", alias="originId")
    origin_room_id: Optional[StrictInt] = Field(default=None, description="The origin room ID of the file entry.", alias="originRoomId")
    origin_title: Optional[StrictStr] = Field(default=None, description="The origin title of the file entry.", alias="originTitle")
    origin_room_title: Optional[StrictStr] = Field(default=None, description="The origin room title of the file entry.", alias="originRoomTitle")
    can_share: Optional[StrictBool] = Field(default=None, description="Specifies if the file entry can be shared or not.", alias="canShare")
    security: Optional[FileDtoIntegerSecurity] = None
    request_token: Optional[StrictStr] = Field(default=None, description="The request token of the file entry.", alias="requestToken")
    folder_id: Optional[StrictInt] = Field(default=None, description="The folder ID where the file is located.", alias="folderId")
    version: Optional[StrictInt] = Field(default=None, description="The file version.")
    version_group: Optional[StrictInt] = Field(default=None, description="The version group of the file.", alias="versionGroup")
    content_length: Optional[StrictStr] = Field(default=None, description="The content length of the file.", alias="contentLength")
    pure_content_length: Optional[StrictInt] = Field(default=None, description="The pure content length of the file.", alias="pureContentLength")
    file_status: Optional[FileStatus] = Field(default=None, alias="fileStatus")
    mute: Optional[StrictBool] = Field(default=None, description="Specifies if the file is muted or not.")
    view_url: Optional[StrictStr] = Field(default=None, description="The URL link to view the file.", alias="viewUrl")
    web_url: Optional[StrictStr] = Field(default=None, description="The Web URL link to the file.", alias="webUrl")
    short_web_url: Optional[StrictStr] = Field(default=None, description="The short Web URL.", alias="shortWebUrl")
    file_type: Optional[FileType] = Field(default=None, alias="fileType")
    file_exst: Optional[StrictStr] = Field(default=None, description="The file extension.", alias="fileExst")
    comment: Optional[StrictStr] = Field(default=None, description="The comment to the file.")
    encrypted: Optional[StrictBool] = Field(default=None, description="Specifies if the file is encrypted or not.")
    thumbnail_url: Optional[StrictStr] = Field(default=None, description="The thumbnail URL of the file.", alias="thumbnailUrl")
    thumbnail_status: Optional[Thumbnail] = Field(default=None, alias="thumbnailStatus")
    locked: Optional[StrictBool] = Field(default=None, description="Specifies if the file is locked or not.")
    locked_by: Optional[StrictStr] = Field(default=None, description="The user ID of the person who locked the file.", alias="lockedBy")
    has_draft: Optional[StrictBool] = Field(default=None, description="Specifies if the file has a draft or not.", alias="hasDraft")
    form_filling_status: Optional[FormFillingStatus] = Field(default=None, alias="formFillingStatus")
    is_form: Optional[StrictBool] = Field(default=None, description="Specifies if the file is a form or not.", alias="isForm")
    custom_filter_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if the Custom Filter editing mode is enabled for a file or not.", alias="customFilterEnabled")
    custom_filter_enabled_by: Optional[StrictStr] = Field(default=None, description="The name of the user who enabled a Custom Filter editing mode for a file.", alias="customFilterEnabledBy")
    start_filling: Optional[StrictBool] = Field(default=None, description="Specifies if the filling has started or not.", alias="startFilling")
    in_process_folder_id: Optional[StrictInt] = Field(default=None, description="The InProcess folder ID of the file.", alias="inProcessFolderId")
    in_process_folder_title: Optional[StrictStr] = Field(default=None, description="The InProcess folder title of the file.", alias="inProcessFolderTitle")
    draft_location: Optional[DraftLocationInteger] = Field(default=None, alias="draftLocation")
    view_accessibility: Optional[FileDtoIntegerViewAccessibility] = Field(default=None, alias="viewAccessibility")
    available_external_rights: Optional[Dict[str, StrictBool]] = Field(default=None, description="The available external rights of the file.", alias="availableExternalRights")
    last_opened: Optional[ApiDateTime] = Field(default=None, alias="lastOpened")
    expired: Optional[ApiDateTime] = None
    file_entry_type: Optional[FileEntryType] = Field(default=None, alias="fileEntryType")
    __properties: ClassVar[List[str]] = ["title", "access", "shared", "created", "createdBy", "updated", "autoDelete", "rootFolderType", "parentRoomType", "updatedBy", "providerItem", "providerKey", "providerId", "order", "id", "rootFolderId", "originId", "originRoomId", "originTitle", "originRoomTitle", "canShare", "security", "requestToken", "folderId", "version", "versionGroup", "contentLength", "pureContentLength", "fileStatus", "mute", "viewUrl", "webUrl", "shortWebUrl", "fileType", "fileExst", "comment", "encrypted", "thumbnailUrl", "thumbnailStatus", "locked", "lockedBy", "hasDraft", "formFillingStatus", "isForm", "customFilterEnabled", "customFilterEnabledBy", "startFilling", "inProcessFolderId", "inProcessFolderTitle", "draftLocation", "viewAccessibility", "availableExternalRights", "lastOpened", "expired", "fileEntryType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileDtoInteger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated
        if self.updated:
            _dict['updated'] = self.updated.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_delete
        if self.auto_delete:
            _dict['autoDelete'] = self.auto_delete.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updatedBy'] = self.updated_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security
        if self.security:
            _dict['security'] = self.security.to_dict()
        # override the default output from pydantic by calling `to_dict()` of draft_location
        if self.draft_location:
            _dict['draftLocation'] = self.draft_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view_accessibility
        if self.view_accessibility:
            _dict['viewAccessibility'] = self.view_accessibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_opened
        if self.last_opened:
            _dict['lastOpened'] = self.last_opened.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expired
        if self.expired:
            _dict['expired'] = self.expired.to_dict()
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if provider_item (nullable) is None
        # and model_fields_set contains the field
        if self.provider_item is None and "provider_item" in self.model_fields_set:
            _dict['providerItem'] = None

        # set to None if provider_key (nullable) is None
        # and model_fields_set contains the field
        if self.provider_key is None and "provider_key" in self.model_fields_set:
            _dict['providerKey'] = None

        # set to None if provider_id (nullable) is None
        # and model_fields_set contains the field
        if self.provider_id is None and "provider_id" in self.model_fields_set:
            _dict['providerId'] = None

        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        # set to None if origin_title (nullable) is None
        # and model_fields_set contains the field
        if self.origin_title is None and "origin_title" in self.model_fields_set:
            _dict['originTitle'] = None

        # set to None if origin_room_title (nullable) is None
        # and model_fields_set contains the field
        if self.origin_room_title is None and "origin_room_title" in self.model_fields_set:
            _dict['originRoomTitle'] = None

        # set to None if security (nullable) is None
        # and model_fields_set contains the field
        if self.security is None and "security" in self.model_fields_set:
            _dict['security'] = None

        # set to None if request_token (nullable) is None
        # and model_fields_set contains the field
        if self.request_token is None and "request_token" in self.model_fields_set:
            _dict['requestToken'] = None

        # set to None if content_length (nullable) is None
        # and model_fields_set contains the field
        if self.content_length is None and "content_length" in self.model_fields_set:
            _dict['contentLength'] = None

        # set to None if pure_content_length (nullable) is None
        # and model_fields_set contains the field
        if self.pure_content_length is None and "pure_content_length" in self.model_fields_set:
            _dict['pureContentLength'] = None

        # set to None if view_url (nullable) is None
        # and model_fields_set contains the field
        if self.view_url is None and "view_url" in self.model_fields_set:
            _dict['viewUrl'] = None

        # set to None if web_url (nullable) is None
        # and model_fields_set contains the field
        if self.web_url is None and "web_url" in self.model_fields_set:
            _dict['webUrl'] = None

        # set to None if short_web_url (nullable) is None
        # and model_fields_set contains the field
        if self.short_web_url is None and "short_web_url" in self.model_fields_set:
            _dict['shortWebUrl'] = None

        # set to None if file_exst (nullable) is None
        # and model_fields_set contains the field
        if self.file_exst is None and "file_exst" in self.model_fields_set:
            _dict['fileExst'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if encrypted (nullable) is None
        # and model_fields_set contains the field
        if self.encrypted is None and "encrypted" in self.model_fields_set:
            _dict['encrypted'] = None

        # set to None if thumbnail_url (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail_url is None and "thumbnail_url" in self.model_fields_set:
            _dict['thumbnailUrl'] = None

        # set to None if locked (nullable) is None
        # and model_fields_set contains the field
        if self.locked is None and "locked" in self.model_fields_set:
            _dict['locked'] = None

        # set to None if locked_by (nullable) is None
        # and model_fields_set contains the field
        if self.locked_by is None and "locked_by" in self.model_fields_set:
            _dict['lockedBy'] = None

        # set to None if has_draft (nullable) is None
        # and model_fields_set contains the field
        if self.has_draft is None and "has_draft" in self.model_fields_set:
            _dict['hasDraft'] = None

        # set to None if is_form (nullable) is None
        # and model_fields_set contains the field
        if self.is_form is None and "is_form" in self.model_fields_set:
            _dict['isForm'] = None

        # set to None if custom_filter_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.custom_filter_enabled is None and "custom_filter_enabled" in self.model_fields_set:
            _dict['customFilterEnabled'] = None

        # set to None if custom_filter_enabled_by (nullable) is None
        # and model_fields_set contains the field
        if self.custom_filter_enabled_by is None and "custom_filter_enabled_by" in self.model_fields_set:
            _dict['customFilterEnabledBy'] = None

        # set to None if start_filling (nullable) is None
        # and model_fields_set contains the field
        if self.start_filling is None and "start_filling" in self.model_fields_set:
            _dict['startFilling'] = None

        # set to None if in_process_folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.in_process_folder_id is None and "in_process_folder_id" in self.model_fields_set:
            _dict['inProcessFolderId'] = None

        # set to None if in_process_folder_title (nullable) is None
        # and model_fields_set contains the field
        if self.in_process_folder_title is None and "in_process_folder_title" in self.model_fields_set:
            _dict['inProcessFolderTitle'] = None

        # set to None if view_accessibility (nullable) is None
        # and model_fields_set contains the field
        if self.view_accessibility is None and "view_accessibility" in self.model_fields_set:
            _dict['viewAccessibility'] = None

        # set to None if available_external_rights (nullable) is None
        # and model_fields_set contains the field
        if self.available_external_rights is None and "available_external_rights" in self.model_fields_set:
            _dict['availableExternalRights'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileDtoInteger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "access": obj.get("access"),
            "shared": obj.get("shared"),
            "created": ApiDateTime.from_dict(obj["created"]) if obj.get("created") is not None else None,
            "createdBy": EmployeeDto.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "updated": ApiDateTime.from_dict(obj["updated"]) if obj.get("updated") is not None else None,
            "autoDelete": ApiDateTime.from_dict(obj["autoDelete"]) if obj.get("autoDelete") is not None else None,
            "rootFolderType": obj.get("rootFolderType"),
            "parentRoomType": obj.get("parentRoomType"),
            "updatedBy": EmployeeDto.from_dict(obj["updatedBy"]) if obj.get("updatedBy") is not None else None,
            "providerItem": obj.get("providerItem"),
            "providerKey": obj.get("providerKey"),
            "providerId": obj.get("providerId"),
            "order": obj.get("order"),
            "id": obj.get("id"),
            "rootFolderId": obj.get("rootFolderId"),
            "originId": obj.get("originId"),
            "originRoomId": obj.get("originRoomId"),
            "originTitle": obj.get("originTitle"),
            "originRoomTitle": obj.get("originRoomTitle"),
            "canShare": obj.get("canShare"),
            "security": FileDtoIntegerSecurity.from_dict(obj["security"]) if obj.get("security") is not None else None,
            "requestToken": obj.get("requestToken"),
            "folderId": obj.get("folderId"),
            "version": obj.get("version"),
            "versionGroup": obj.get("versionGroup"),
            "contentLength": obj.get("contentLength"),
            "pureContentLength": obj.get("pureContentLength"),
            "fileStatus": obj.get("fileStatus"),
            "mute": obj.get("mute"),
            "viewUrl": obj.get("viewUrl"),
            "webUrl": obj.get("webUrl"),
            "shortWebUrl": obj.get("shortWebUrl"),
            "fileType": obj.get("fileType"),
            "fileExst": obj.get("fileExst"),
            "comment": obj.get("comment"),
            "encrypted": obj.get("encrypted"),
            "thumbnailUrl": obj.get("thumbnailUrl"),
            "thumbnailStatus": obj.get("thumbnailStatus"),
            "locked": obj.get("locked"),
            "lockedBy": obj.get("lockedBy"),
            "hasDraft": obj.get("hasDraft"),
            "formFillingStatus": obj.get("formFillingStatus"),
            "isForm": obj.get("isForm"),
            "customFilterEnabled": obj.get("customFilterEnabled"),
            "customFilterEnabledBy": obj.get("customFilterEnabledBy"),
            "startFilling": obj.get("startFilling"),
            "inProcessFolderId": obj.get("inProcessFolderId"),
            "inProcessFolderTitle": obj.get("inProcessFolderTitle"),
            "draftLocation": DraftLocationInteger.from_dict(obj["draftLocation"]) if obj.get("draftLocation") is not None else None,
            "viewAccessibility": FileDtoIntegerViewAccessibility.from_dict(obj["viewAccessibility"]) if obj.get("viewAccessibility") is not None else None,
            "availableExternalRights": obj.get("availableExternalRights"),
            "lastOpened": ApiDateTime.from_dict(obj["lastOpened"]) if obj.get("lastOpened") is not None else None,
            "expired": ApiDateTime.from_dict(obj["expired"]) if obj.get("expired") is not None else None,
            "fileEntryType": obj.get("fileEntryType")
        })
        return _obj


